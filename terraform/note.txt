resource "azurerm_virtual_network" "vnet" {
  name                = "book-vnet"
  location            = "West Europe"
  address_space       = ["10.0.0.0/16"]
  resource_group_name = azurerm_resource_group.rg.name
}

resource "azurerm_subnet" "subnet" {
  name                 = "book-subnet"
  virtual_network_name = azurerm_virtual_network.vnet.name
  resource_group_name  = azurerm_resource_group.rg.name
  address_prefix       = "10.0.10.0/24"
}
azurerm  = azure resources manager
provider "azurerm" {
}


<img src="" alt="">
https://theproli.com/usage/images/banner/main_banner_collection.png
@Bch2009021

wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -


sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'

sudo apt update

sudo apt install jenkins


export APPNAME=$(az webapp list --query [0].name --output tsv)
export APPRG=$(az webapp list --query [0].resourceGroup --output tsv)
export APPPLAN=$(az appservice plan list --query [0].name --output tsv)
export APPSKU=$(az appservice plan list --query [0].sku.name --output tsv)
export APPLOCATION=$(az appservice plan list --query [0].location --output tsv)

az webapp up --name $APPNAME --resource-group $APPRG --plan $APPPLAN --sku $APPSKU --location "$APPLOCATION"


C:\Users\BONJOUREX\Desktop\abp-chat-app\backend\Lib\Config\keys\dev

Details
Subscription
0d562b56-7b9d-4b58-9e57-97f8251e8ad7

Resource Group
AbpGrp1

Name
abpChatApp



# Node.js React Web App to Linux on Azure
# Build a Node.js React app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: "a32fb521-2d2d-412f-8d2c-7fce403ff8bd"

  # Web app name
  webAppName: "abpChatApp"

  # Environment name
  environmentName: "abpChatApp"

  # Agent VM image name
  vmImageName: "ubuntu-latest"

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: "$(vmImageName)"

    steps:
    - task: "ArchiveFiles@2"
      displayName: "Archive files"
      inputs:
        rootFolderOrFile: "$(System.DefaultWorkingDirectory)"
        includeRootFolder: false
        archiveType: zip
        archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
        replaceExistingArchive: true

    - upload: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: "$(environmentName)"
    pool:
      vmImage: "$(vmImageName)"
    strategy:
      runOnce:
        deploy:
          steps:
          - task: "AzureRmWebAppDeployment@4"
            displayName: "Azure App Service Deploy: abpChatApp"
            inputs:
              azureSubscription: "$(azureSubscription)"
              appType: webAppLinux
              WebAppName: "$(webAppName)"
              packageForLinux: "$(Pipeline.Workspace)/drop/$(Build.BuildId).zip"
              RuntimeStack: "NODE:10.10"
              StartupCommand: "npm run start"
              ScriptType: "Inline Script"
              InlineScript: 
                npm install
                npm run build --if-present




terraform init -migrate-state
terraform init -reconfigure
