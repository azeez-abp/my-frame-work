
ASSETION

To use strict assertion mode:

import { strict as assert } from 'node:assert';
const assert = require('node:assert').strict;
import assert from 'node:assert/strict';
const assert = require('node:assert/strict'); commonJs
assert.strict methods [
    deepEqual(actual,expected)
]

******************************************************
LAGACY ASSERTION
Legacy assertion mode uses the == operator in:
assert.deepEqual()
assert.equal()
assert.notDeepEqual()
assert.notEqual()
To use legacy assertion mode:

import assert from 'node:assert';
 WARNING: This does not throw an AssertionError in legacy assertion mode!
assert.deepEqual(/a/gi, new Date()); 
inside assert module there is a class AssertionError
new assert.AssertionError(options)
options <Object>
    message <string> If provided, the error message is set to this value.
    actual <any> The actual property on the error instance.
    expected <any> The expected property on the error instance.
    operator <string> The operator property on the error instance.
    stackStartFn <Function> If provided, the generated stack trace omits frames before this function.

let option  = {
    message:
    actual :
    expected:
    operator:
    stackStartFn:

}
new assert.AssertionError(options)
````
import assert from 'node:assert';
const { message } = new assert.AssertionError({
  actual: 1,
  expected: 2,
  operator: 'strictEqual',
});


// Verify error output:
try {
  assert.strictEqual(1, 2);
} catch (err) {
  assert(err instanceof assert.AssertionError);
  assert.strictEqual(err.message, message);
  assert.strictEqual(err.name, 'AssertionError');
  assert.strictEqual(err.actual, 1);
  assert.strictEqual(err.expected, 2);
  assert.strictEqual(err.code, 'ERR_ASSERTION');
  assert.strictEqual(err.operator, 'strictEqual');
  assert.strictEqual(err.generatedMessage, true);
}
```

