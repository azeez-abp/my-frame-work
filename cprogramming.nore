Preprocessor directives in C
By Ravikiran A S
Last updated on Feb 26, 202355496
Preprocessor Directives in C
Table of Contents
List of Preprocessor DirectivesProcess Flow of Preprocessor DirectivesFour Major Types of Preprocessor DirectivesConclusion
We can consider a preprocessor as a compilation process, which runs when the developer runs the program. It is a pre-process of execution of a program using c/c++ language. To initialize a process of preprocessor commands, it's mandated to define with a hash symbol (#).  It can  preferably be the non-blank character, and for better readability, a preprocessor directive should start in the first column. 

Learn from the Best in the Industry!
Caltech PGP Full Stack DevelopmentEXPLORE PROGRAMLearn from the Best in the Industry!
List of Preprocessor Directives
To execute a preprocessor program on a certain statement, some of the preprocessor directives types are: 

#define: It substitutes a preprocessor using macro.
#include: It helps to insert a certain header from another file.
#undef: It undefines a certain preprocessor macro.
#ifdef: It returns true if a certain macro is defined.
#ifndef: It returns true if a certain macro is not defined.
#if, #elif, #else, and #endif: It tests the program using a certain condition; these directives can be nested too. 
#line: It handles the line numbers on the errors and warnings. It can be used to change the line number and source files while generating output during compile time.
#error and #warning: It can be used for generating errors and warnings.
#error can be performed to stop compilation.
#warning is performed to continue compilation with messages in the console window.
#region and #endregion: To define the sections of the code to make them more understandable and readable, we can use the region using expansion and collapse features.


Types of Predefined Macros
___TIME___ defines the current time using a character literal in “HH:MM: SS” format.
___STDC___ specifies as 1 when the compiler complies with the ANSI standard.
___TIMESTAMP___ specifies the timestamp “DDD MM YYYY Date HH:MM: SS”. It is used to define the date and time of the latest modification of the present source file.
___LINE___ consists of a present line number with a decimal constant.
___FILE___ includes the current filename using a string literal.
___DATE___ shows the present date with a character literal in the “MMM DD YYYY” format

https://data-flair.training/courses/free-c-programming-course-hindi/